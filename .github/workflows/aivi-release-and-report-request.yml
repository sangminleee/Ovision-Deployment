name: AIVI Deployment

on:
  workflow_dispatch:  # 수동으로 워크플로우를 트리거할 수 있도록 설정

jobs:
  trigger-repo-actions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: [ 'Kvision-Api-Server', 'backend-base-domain' ]
    outputs:
      response: ${{ steps.trigger.outputs.response }}

    steps:
      - name: Trigger ${{ matrix.repo }} workflow
        id: trigger
        run: |
          url="https://api.github.com/repos/sangminleee/${{ matrix.repo }}/actions/workflows/aivi-release-and-report.yml/dispatches"
          echo "url=$url"
          step_response=$(curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            $url \
            -d '{"ref":"aivi"}')
          echo "response=$step_response"
          echo "response=$step_response" >> "GITHUB_OUTPUT"

  wait-for-completion:
    runs-on: ubuntu-latest
    needs: trigger-repo-actions
    strategy:
      matrix:
        repo: [ 'Kvision-Api-Server', 'backend-base-domain' ]

    steps:
      - name: Wait for ${{ matrix.repo }} workflow to complete
        run: |
          response="${{ needs.trigger-repo-actions.outputs.response }}"
          echo "response=$response"
          if [ -n "$response" ]; then
            echo "Response exists, not proceeding to the next job."
            exit 0
          else
            echo "Response not exists, proceeding to the next job."
          fi

          while :
          do
            result=$(curl -L \
              -X GET \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              https://api.github.com/repos/sangminleee/${{ matrix.repo }}/actions/runs \
              | jq -r '[.workflow_runs[] | select(.head_branch=="aivi" and .name=="AIVI Release and Deploy")] | first')

            created_at=$(echo $result | jq -r '.created_at')
            echo "created_at=$created_at"

            status=$(echo $result | jq -r '.status')
            echo "status=$status"

            conclusion=$(echo $result | jq -r '.conclusion')
            echo "conclusion=$conclusion"

            current_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            echo "current_time=$current_time"

            ten_seconds_ago=$(date -u --date='30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)
            echo "ten_seconds_ago=$ten_seconds_ago"

            if [[ "$created_at" > "$ten_seconds_ago" && "$status" == "completed" && "$conclusion" == "success" ]]; then
              echo "$repo workflow completed successfully within the expected time frame."
              break
            elif [[ "$created_at" > "$ten_seconds_ago" && "$status" == "completed" && "$conclusion" != "success" ]]; then
              echo "$repo workflow failed within the expected time frame."
              exit 1
            else
              echo "Waiting for $repo workflow to complete..."
              sleep 30
            fi
          done

  run-report:
    runs-on: ubuntu-latest
    needs: wait-for-completion
    if: success()
    steps:
      - name: Trigger aivi-report-to-teams workflow
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/your-organization/Ovision-Deployment/actions/workflows/aivi-report-to-teams.yml/dispatches \
            -d '{"ref":"aivi"}'
